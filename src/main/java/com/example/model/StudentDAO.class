// Source code is decompiled from a .class file using FernFlower decompiler.
package com.example.dao;

import com.example.db.DatabaseConnection;
import com.example.model.Student;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class StudentDAO {
   public StudentDAO() {
   }

   public void createStudent(Student student) {
      String sql = "INSERT INTO students (firstName, lastName, age) VALUES (?, ?, ?)";

      try {
         Connection conn = DatabaseConnection.getConnection();

         try {
            PreparedStatement pstmt = conn.prepareStatement(sql);

            try {
               pstmt.setString(1, student.getFirstName());
               pstmt.setString(2, student.getLastName());
               pstmt.setInt(3, student.getAge());
               pstmt.executeUpdate();
               System.out.println("Student created: " + String.valueOf(student));
            } catch (Throwable var9) {
               if (pstmt != null) {
                  try {
                     pstmt.close();
                  } catch (Throwable var8) {
                     var9.addSuppressed(var8);
                  }
               }

               throw var9;
            }

            if (pstmt != null) {
               pstmt.close();
            }
         } catch (Throwable var10) {
            if (conn != null) {
               try {
                  conn.close();
               } catch (Throwable var7) {
                  var10.addSuppressed(var7);
               }
            }

            throw var10;
         }

         if (conn != null) {
            conn.close();
         }
      } catch (SQLException var11) {
         var11.printStackTrace();
      }

   }

   public List<Student> getAllStudents() {
      List<Student> students = new ArrayList();
      String sql = "SELECT * FROM students";

      try {
         Connection conn = DatabaseConnection.getConnection();

         try {
            Statement stmt = conn.createStatement();

            try {
               ResultSet rs = stmt.executeQuery(sql);

               try {
                  while(rs.next()) {
                     Student student = new Student(rs.getInt("id"), rs.getString("firstName"), rs.getString("lastName"), rs.getInt("age"));
                     students.add(student);
                  }
               } catch (Throwable var11) {
                  if (rs != null) {
                     try {
                        rs.close();
                     } catch (Throwable var10) {
                        var11.addSuppressed(var10);
                     }
                  }

                  throw var11;
               }

               if (rs != null) {
                  rs.close();
               }
            } catch (Throwable var12) {
               if (stmt != null) {
                  try {
                     stmt.close();
                  } catch (Throwable var9) {
                     var12.addSuppressed(var9);
                  }
               }

               throw var12;
            }

            if (stmt != null) {
               stmt.close();
            }
         } catch (Throwable var13) {
            if (conn != null) {
               try {
                  conn.close();
               } catch (Throwable var8) {
                  var13.addSuppressed(var8);
               }
            }

            throw var13;
         }

         if (conn != null) {
            conn.close();
         }
      } catch (SQLException var14) {
         var14.printStackTrace();
      }

      return students;
   }

   public Student getStudentById(int id) {
      String sql = "SELECT * FROM students WHERE id = ?";

      try {
         Connection conn = DatabaseConnection.getConnection();

         label78: {
            Student var6;
            try {
               PreparedStatement pstmt = conn.prepareStatement(sql);

               label80: {
                  try {
                     pstmt.setInt(1, id);
                     ResultSet rs = pstmt.executeQuery();
                     if (rs.next()) {
                        var6 = new Student(rs.getInt("id"), rs.getString("firstName"), rs.getString("lastName"), rs.getInt("age"));
                        break label80;
                     }
                  } catch (Throwable var9) {
                     if (pstmt != null) {
                        try {
                           pstmt.close();
                        } catch (Throwable var8) {
                           var9.addSuppressed(var8);
                        }
                     }

                     throw var9;
                  }

                  if (pstmt != null) {
                     pstmt.close();
                  }
                  break label78;
               }

               if (pstmt != null) {
                  pstmt.close();
               }
            } catch (Throwable var10) {
               if (conn != null) {
                  try {
                     conn.close();
                  } catch (Throwable var7) {
                     var10.addSuppressed(var7);
                  }
               }

               throw var10;
            }

            if (conn != null) {
               conn.close();
            }

            return var6;
         }

         if (conn != null) {
            conn.close();
         }
      } catch (SQLException var11) {
         var11.printStackTrace();
      }

      return null;
   }

   public void updateStudent(Student student) {
      String sql = "UPDATE students SET firstName = ?, lastName = ?, age = ? WHERE id = ?";

      try {
         Connection conn = DatabaseConnection.getConnection();

         try {
            PreparedStatement pstmt = conn.prepareStatement(sql);

            try {
               pstmt.setString(1, student.getFirstName());
               pstmt.setString(2, student.getLastName());
               pstmt.setInt(3, student.getAge());
               pstmt.setInt(4, student.getId());
               int rowsAffected = pstmt.executeUpdate();
               if (rowsAffected > 0) {
                  System.out.println("Student updated: " + String.valueOf(student));
               } else {
                  System.out.println("No student found with ID: " + student.getId());
               }
            } catch (Throwable var9) {
               if (pstmt != null) {
                  try {
                     pstmt.close();
                  } catch (Throwable var8) {
                     var9.addSuppressed(var8);
                  }
               }

               throw var9;
            }

            if (pstmt != null) {
               pstmt.close();
            }
         } catch (Throwable var10) {
            if (conn != null) {
               try {
                  conn.close();
               } catch (Throwable var7) {
                  var10.addSuppressed(var7);
               }
            }

            throw var10;
         }

         if (conn != null) {
            conn.close();
         }
      } catch (SQLException var11) {
         var11.printStackTrace();
      }

   }

   public void deleteStudent(int id) {
      String sql = "DELETE FROM students WHERE id = ?";

      try {
         Connection conn = DatabaseConnection.getConnection();

         try {
            PreparedStatement pstmt = conn.prepareStatement(sql);

            try {
               pstmt.setInt(1, id);
               int rowsAffected = pstmt.executeUpdate();
               if (rowsAffected > 0) {
                  System.out.println("Student deleted with ID: " + id);
               } else {
                  System.out.println("No student found with ID: " + id);
               }
            } catch (Throwable var9) {
               if (pstmt != null) {
                  try {
                     pstmt.close();
                  } catch (Throwable var8) {
                     var9.addSuppressed(var8);
                  }
               }

               throw var9;
            }

            if (pstmt != null) {
               pstmt.close();
            }
         } catch (Throwable var10) {
            if (conn != null) {
               try {
                  conn.close();
               } catch (Throwable var7) {
                  var10.addSuppressed(var7);
               }
            }

            throw var10;
         }

         if (conn != null) {
            conn.close();
         }
      } catch (SQLException var11) {
         var11.printStackTrace();
      }

   }
}
